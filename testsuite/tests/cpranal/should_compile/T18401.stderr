
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 58, types: 93, coercions: 0, joins: 1/1}

Rec {
-- RHS size: {terms: 18, types: 24, coercions: 0, joins: 0/0}
T18401.$w$spoly_$wgo2 :: forall a. a -> [a] -> (# [a] #)
T18401.$w$spoly_$wgo2
  = \ (@a_s1dv) (sc_s1dw :: a_s1dv) (sc1_s1dx :: [a_s1dv]) ->
      case sc1_s1dx of {
        [] -> (# GHC.Types.[] @a_s1dv #);
        : y_a1ct ys_a1cu -> (# GHC.Types.: @a_s1dv sc_s1dw (case T18401.$w$spoly_$wgo2 @a_s1dv y_a1ct ys_a1cu of { (# ww_s1dC #) -> ww_s1dC }) #)
      }
end Rec }

-- RHS size: {terms: 23, types: 29, coercions: 0, joins: 1/1}
si :: forall a. [a] -> (Bool, [a])
si
  = \ (@a_s1cD) (xs0_s1cE :: [a_s1cD]) ->
      join {
        $j_s1dr :: Bool %1 -> [a_s1cD] %1 -> (Bool, [a_s1cD])
        $j_s1dr (ww_s1cS :: Bool) (ww1_s1cT :: [a_s1cD]) = (ww_s1cS, ww1_s1cT) } in
      case xs0_s1cE of {
        [] -> jump $j_s1dr GHC.Types.False (GHC.Types.[] @a_s1cD);
        : y_a1ct ys_a1cu -> jump $j_s1dr GHC.Types.True (case T18401.$w$spoly_$wgo2 @a_s1cD y_a1ct ys_a1cu of { (# ww_s1dC #) -> ww_s1dC })
      }

-- RHS size: {terms: 14, types: 19, coercions: 0, joins: 0/0}
safeInit :: forall a. [a] -> Maybe [a]
safeInit
  = \ (@a_aR8) (xs_awS :: [a_aR8]) ->
      case xs_awS of {
        [] -> GHC.Maybe.Nothing @[a_aR8];
        : y_a1ct ys_a1cu -> GHC.Maybe.Just @[a_aR8] (case T18401.$w$spoly_$wgo2 @a_aR8 y_a1ct ys_a1cu of { (# ww_s1dC #) -> ww_s1dC })
      }



